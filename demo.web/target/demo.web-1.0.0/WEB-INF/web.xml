<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" version="3.0">
    <context-param>
        <param-name>contextInitializerClasses</param-name>
        <param-value>demo.config.ProfileInitializer</param-value>
    </context-param>
    <!-- profile是配置完了，但还要激活spring的profile特性 -->
    <context-param>
        <param-name>spring.profiles.active</param-name>
        <param-value>product</param-value>
    </context-param>

    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath*:/spring/*.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/rest/*</url-pattern>
    </servlet-mapping>


    <!-- 两个 classpath*:spring/*.xml
        由于service 模块 和 web 模块下的 spring 配置都放在 spring 文件夹下
        会导致加载两次bean
        解决方案
            1. 按上面配置
            2. 加载SpringMvc 时， web 模块的 Spring 配置文件不存放于与service spring 配置存放的 spring文件夹同名文件夹下
     -->

    <!--&lt;!&ndash; 加载 spring 容器 &ndash;&gt;-->
    <!--<context-param>-->
        <!--<param-name>contextConfigLocation</param-name>-->
        <!--<param-value>classpath*:spring/*.xml</param-value>-->
    <!--</context-param>-->
    <!--<context-param>-->
        <!--<param-name>contextInitializerClasses</param-name>-->
        <!--<param-value>demo.config.ProfileInitializer</param-value>-->
    <!--</context-param>-->
    <!--&lt;!&ndash; profile是配置完了，但还要激活spring的profile特性 &ndash;&gt;-->
    <!--<context-param>-->
        <!--<param-name>spring.profiles.active</param-name>-->
        <!--<param-value>product</param-value>-->
    <!--</context-param>-->

    <!-- web.xml自定义类配置listener并实现ServletContextListener  -->
     <!--监听接口，实现了 ServletContextListener-->
    <!--<listener>-->
        <!--<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>-->
    <!--</listener>-->
    <!--<listener>-->
        <!--<listener-class>org.springframework.security.web.session.HttpSessionEventPublisher</listener-class>-->
    <!--</listener>-->

    <!-- 加载 spring mvc 子容器 -->
    <!--<servlet>-->
        <!--<servlet-name>dispatcher</servlet-name>-->
        <!--<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>-->
        <!--<init-param>-->
            <!--<param-name>contextConfigLocation</param-name>-->
            <!--<param-value>classpath*:spring/*.xml</param-value>-->
        <!--</init-param>-->
        <!--<load-on-startup>1</load-on-startup>-->
    <!--</servlet>-->
    <!--<servlet-mapping>-->
        <!--<servlet-name>dispatcher</servlet-name>-->
        <!--<url-pattern>/rest/*</url-pattern>-->
    <!--</servlet-mapping>-->


    <!-- 配置编码过滤器，防止乱码 -->
    <filter>
        <filter-name>encoding</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <!-- 初始参数,设定字符集 -->
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encoding</filter-name>
        <url-pattern>*</url-pattern>
    </filter-mapping>

    <!-- shiro 拦截器 -->
    <filter>
        <filter-name>shiroFilter</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>shiroFilter</filter-name>
        <url-pattern>/rest/*</url-pattern>
    </filter-mapping>

</web-app>
