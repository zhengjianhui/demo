<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">

    <bean id="repository" class="demo.shiro.session.repository.RedisShiroSessionRepository"/>
    <!-- 会话ID生成器 -->
    <bean id="sessionIdGenerator"
          class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>
    <!-- sessionDao -->
    <bean id="sessionDAO" class="demo.shiro.session.dao.MySessionDao">
        <property name="shiroSessionRepository" ref="repository"/>
        <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
    </bean>
    <!-- 会话Cookie模板 -->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <!--cookie的name，我故意取名叫xxxxbaidu -->
        <constructor-arg value="zjh_demo"/>
        <property name="httpOnly" value="true"/>
        <!--cookie的有效时间 正负都可以，为负数时表示永不超时 表示浏览器关闭时失效此Cookie；  -->
        <property name="maxAge" value="-1"/>
        <!-- 配置存储Session Cookie的domain为 一级域名
        <property name="domain" value=".itboy.net"/>
         -->
    </bean>

    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="rememberMe"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="2592000"/><!-- 30天 -->
    </bean>
    <!-- cipherKey是加密rememberMe Cookie的密钥；默认AES算法 -->
    <bean id="rememberMeManager"
          class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <property name="cipherKey"
                  value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}"/>
        <property name="cookie" ref="rememberMeCookie"/>
    </bean>

    <!-- 会话验证调度器 -->
    <bean id="sessionValidationScheduler"
          class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler">
        <!-- 间隔多少时间检查，不配置是60分钟 -->
        <property name="interval" value="1800000"/>
        <property name="sessionManager" ref="sessionManager"/>
    </bean>
    <!-- 会话管理器 -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <property name="globalSessionTimeout" value="1800000"/>
        <property name="sessionDAO" ref="sessionDAO"/>
        <!-- 间隔多少时间检查，不配置是60分钟 -->
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
        <!-- 是否开启 检测，默认开启 -->
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <!-- 是否删除无效的，默认也是开启 -->
        <property name="deleteInvalidSessions" value="true"/>
        <!-- 会话Cookie模板 -->
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
    </bean>


    <!-- 缓存的设置 -->
    <!-- jedis 配置 构造注入 -->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.maxIdle}"/>
        <property name="maxTotal" value="${redis.maxActive}"/>
        <property name="maxWaitMillis" value="${redis.maxWait}"/>
        <property name="testOnBorrow" value="${redis.testOnBorrow}"/>
    </bean>
    <!-- jedis 配置 构造注入 -->
    <bean id="pool" class="redis.clients.jedis.JedisPool">
        <constructor-arg index="0" ref="poolConfig"/>
        <constructor-arg>
            <value>${redis.host}</value>
        </constructor-arg>
        <constructor-arg>
            <value type="int">${redis.port}</value>
        </constructor-arg>
        <constructor-arg>
            <value type="int">${redis.timeout}</value>
        </constructor-arg>
        <constructor-arg>
            <value>${redis.password}</value>
        </constructor-arg>
    </bean>
    <!--<bean class="org.apache.shiro.cache.MemoryConstrainedCacheManager" id="shiroCacheManager"/>-->
    <bean id="cacherepository" class="demo.shiro.cache.repository.JedisManager">
        <property name="jedisPool" ref="pool"/>
    </bean>
    <!-- shiro 缓存实现，对ShiroCacheManager，我是采用redis的实现 -->
    <bean id="RedisShiroCacheManager" class="demo.shiro.cache.RedisShiroCacheManager">
        <property name="jedisManager" ref="cacherepository"/>
    </bean>
    <!-- 用户缓存 -->
    <bean id="cacheManager" class="demo.shiro.cache.CustomShiroCacheManager">
        <property name="shiroCacheManager" ref="RedisShiroCacheManager"/>
    </bean>

    <!-- 自定义 Realm role  -->
    <bean id="customRealm" class="demo.shiro.realm.CustomRealm">
        <property name="credentialsMatcher" ref="credentialsMatcher"/>
    </bean>
    <bean id="credentialsMatcher" class="demo.shiro.realm.MyHashedCredentialsMatcher">
        <property name="hashAlgorithmName" value="md5"/><!--指定hash算法为MD5；-->
        <property name="hashIterations" value="2"/><!--指定散列次数为2次；-->
        <property name="storedCredentialsHexEncoded"
                  value="true"/><!--指定Hash散列值使用Hex加密存储。value="false"表明hash散列值用用Base64-encoded存储。-->
    </bean>

    <!-- 安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="customRealm"/>
        <property name="sessionManager" ref="sessionManager"/>
        <property name="cacheManager" ref="cacheManager"/>
        <property name="rememberMeManager" ref="rememberMeManager"/>
    </bean>
    <!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>


    <!-- 自定义拦截器 -->
    <bean id="login" class="demo.shiro.filter.LoginFilter"/>
    <bean id="logout" class="demo.shiro.filter.MyLogoutFilter">
        <property name="jedisManager" ref="cacherepository"/>
    </bean>

    <bean id="kickoutSessionControlFilter" class="demo.shiro.filter.KickoutSessionFilter">
        <property name="cacheManager" ref="cacheManager"/>
        <property name="sessionManager" ref="sessionManager"/>

        <property name="kickoutAfter" value="false"/>
        <property name="maxSession" value="1"/>
    </bean>

    <bean id="role" class="demo.shiro.filter.RoleFilter"/>

    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="filters">
            <map>
                <!-- 将自定义 的拦截器 注入shiroFilter中 -->
                <!--<entry key="authc" value-ref="formAuthenticationFilter"/>-->
                <entry key="authc" value-ref="login"/>
                <entry key="roles" value-ref="role"/>
                <entry key="kickout" value-ref="kickoutSessionControlFilter"/>
                <entry key="logout" value-ref="logout"/>
            </map>
        </property>

        <!--<property name="unauthorizedUrl" value="/?login"/>-->
        <property name="filterChainDefinitions">
            <value>
                <!-- 在URI 后指定使用的拦截器 -->
                /index.html = anon
                /rest/signUp = anon
                /rest/login = authc
                /rest/logout = logout
                /** = kickout, authc
                <!--/page/register/* = anon-->
                <!--/page/index.jsp = authc-->
                <!--/page/addItem* = authc,roles[数据管理员]-->
                <!--/page/file* = authc,roleOR[普通用户,数据管理员]-->
                <!--/page/listItems* = authc,roleOR[数据管理员,普通用户]-->
                <!--/page/showItem* = authc,roleOR[数据管理员,普通用户]-->
                <!--/page/updateItem*=authc,roles[数据管理员]-->
            </value>
        </property>
    </bean>


    <aop:config proxy-target-class="true"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

</beans>